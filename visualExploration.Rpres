Interactive and Visual Data Exploration
========================================================
type:prompt
css: workshop.css

The Viewer
========================================================

In addition to the "Plots" pane, RStudio also provides a "Viewer" pane.

Anything interactive will be displayed there.

Packages
========================================================

A few important packages:

  - <span class="pack">ggvis</span>

  - <span class="pack">rbokeh</span>

  - <span class="pack">DT</span>

Interactive Tables (View)
========================================================

RStudio now gives you a sortable table with the <span class="func">View</span> function.

  - <span class="func">View</span> just like you would otherwise use

```{r, eval = FALSE}
View(state.x77)
```


Interactive Tables With 'DT'
========================================================

The <span class="pack">DT</span> package allows you to create interactive data tables.

These tables will open in your viewer:

  - They also work nicely within R Markdown and similar formats

    - They don't, however, work in ioslides!

Checking Your Data
========================================================

It is always a good idea to give your data a visual pass.

```{r, eval = FALSE, echo=-1}
library(dplyr)

DT::datatable(state.x77)
```

Identify anomolies, nonsense values, etc.

Other Things To Check
========================================================

Summaries

```{r, eval = FALSE}
cbind(data.frame(state.x77), state.division) %>%
  group_by(state.division) %>%
  summarize(meanPop = round(mean(Population), 2),
            meanMurder = round(mean(Murder), 2)) %>%
  DT::datatable()
```

Correlation Tables

```{r, eval = FALSE}
data.frame(state.x77) %>%
  cor() %>%
  round(2) %>%
  DT::datatable()
```


Some Additional Functionality
========================================================

The <span class="func">datatable</span> function also has an argument to filter your data.

```{r, eval = FALSE}
DT::datatable(cbind(data.frame(state.x77), state.division), filter = "top")
```

Same as above, but with division as a string:

```{r, eval = FALSE}
DT::datatable(cbind(data.frame(state.x77), as.character(state.division)), filter = "top")
```

Interactive Plots
========================================================

RStudio, in conjunction with some modern packages, lets you visually explore your data.

There are two packages that are great for this:

  - <span class="pack">ggvis</span>

  - <span class="pack">rbokeh</span>

ggvis
========================================================
With <span class="pack">ggvis</span>, you can take some of what you know from <span class="pack">ggplot2</span> and use it to create interactive, web-ready plots.

  - Instead of building layers with <span class="func">+</span>, <span class="pack">ggvis</span> imports the <span class="func">%>%</span> operator from <span class="pack">magrittr</span>.


ggvis
========================================================

```{r, eval=FALSE}
library(ggvis)

cbind(data.frame(state.x77), state.division) %>%
  ggvis(~ Illiteracy, ~ Income) %>%
  layer_points(fill = ~ state.division) %>%
  layer_smooths(span = input_slider(.2, 1))
```


rbokeh
========================================================

The <span class="pack">rbokeh</span> package is a port of the 'bokeh' package from Python.

It is very similar to <span class="pack">ggvis</span>, but there are some distinct differences.

An Example
========================================================

```{r, eval=FALSE}
library(rbokeh)

cbind(data.frame(state.x77), state.name) %>%
  figure() %>%
  ly_points(x = Illiteracy, y = Income,
            color = state.division,
            hover = state.name) %>%
  ly_lines(lowess(x = Illiteracy,
                  y = Income))

```


Which One?
========================================================

It might be easier to get up and going with <span class="pack">rbokeh</span>.

On the other hand, <span class="pack">ggvis</span> is incredibly powerful and is ready to go into any <span class="pack">shiny</span> app.


Quick Wrap
========================================================

RStudio lets you take a deeper look at your data.

Interactive tables and plots go a long way to helping you understand your data better.